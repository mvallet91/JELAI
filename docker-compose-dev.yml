# JupyterLab and middleware development environment
# For single-user experimentation or development, use this docker-compose file to start a JupyterLab and middleware development environment.

services:
  notebook-dev:
    build:
      context: ./jupyterhub-docker/user-notebook
      dockerfile: Dockerfile
      args:
        - CHAT_DIR=chats
    volumes:
        # Mount notebook workspace and log data for development
        - "notebook-workspace:/home/jovyan/work"
        - "log-data:/home/jovyan/logs" 
    environment:
      - JUPYTER_TOKEN=dev  # Simple token for development access
      - TA_MIDDLEWARE_URL=http://middleware-dev:8004
    image: user-notebook-dev
    container_name: notebook-dev
    ports:
      - "8888:8888"  # Expose JupyterLab directly
    networks:
      - jelai-dev-network
    command: >
      bash -c "
      echo 'Starting background services...' &&
      . /home/jovyan/venv/bin/activate &&
      python /home/jovyan/chat_interact.py /home/jovyan/work/chats /home/jovyan/logs/processed >> /home/jovyan/chat_interact.log 2>&1 &
      echo 'Processing logs...' &&
      . /home/jovyan/venv/bin/activate &&
      python /home/jovyan/process_logs.py /home/jovyan/logs/log /home/jovyan/logs/processed >> /home/jovyan/process_logs.log 2>&1 &
      echo 'Starting JupyterLab...' &&
      jupyter lab
      --ip=0.0.0.0
      --port=8888
      --no-browser
      --ServerApp.token='dev'
      --ServerApp.password=''
      --ServerApp.allow_remote_access=True
      "

  middleware-dev:
    build:
      context: ./jupyterhub-docker/middleware
      dockerfile: Dockerfile
    image: middleware-dev
    container_name: middleware-dev
    networks:
      - jelai-dev-network
    volumes:
      # Mount middleware code for development
      - "middleware-dev-data:/var/log/jelai"
      - "chat-histories:/app/chat_histories"
      # Mount learning objectives file directly
      - "./jupyterhub-docker/middleware/learning_objectives.yaml:/app/learning_objectives.yaml:rw"
      # Mount middleware code for live development
      - "./jupyterhub-docker/middleware/ea-handler.py:/app/ea-handler.py"
      - "./jupyterhub-docker/middleware/ta-handler.py:/app/ta-handler.py"
      - "./jupyterhub-docker/middleware/utils.py:/app/utils.py"
      - "./jupyterhub-docker/middleware/inputs:/app/inputs"
    ports:
      - "24224:24224"
      - "8003:8003"  # EA handler server
      - "8004:8004"  # TA handler server
      # Port 8005 admin API is now internal only - accessed via admin dashboard

  admin-dashboard-dev:
    build:
      context: ./jupyterhub-docker/admin-dashboard
      dockerfile: Dockerfile
    image: admin-dashboard-dev
    container_name: admin-dashboard-dev
    networks:
      - jelai-dev-network
    volumes:
      # Mount admin dashboard code for development
      - "./jupyterhub-docker/admin-dashboard/app.py:/app/app.py"
      - "./jupyterhub-docker/admin-dashboard/templates:/app/templates"
      - "./jupyterhub-docker/admin-dashboard/static:/app/static"
      # Mount middleware inputs for configuration
      - "./jupyterhub-docker/middleware/inputs:/app/inputs:rw"
      # Mount learning objectives file directly (since we know it exists)
      - "./jupyterhub-docker/middleware/learning_objectives.yaml:/app/learning_objectives.yaml:rw"
      # Mount shared data volumes
      - "chat-histories:/app/chat_histories:ro"
      - "middleware-dev-data:/app/logs:ro"
    environment:
      - MIDDLEWARE_URL=http://middleware-dev:8005
      # No JUPYTERHUB_URL in dev - this enables development mode
      - ENABLE_SIMPLE_AUTH=true
      - ADMIN_USERNAME=admin
      - ADMIN_PASSWORD=admin123
      - ADMIN_SECRET_KEY=dev-secret-key-change-in-production
    ports:
      - "8006:8006"  # Admin dashboard
    depends_on:
      - middleware-dev

volumes:
  chat-histories:
  middleware-dev-data:
  notebook-workspace:
  log-data:
  # Note: learning-materials, workspace-templates, shared-resources are empty in dev
  # They can be added later when content is available

networks:
  jelai-dev-network:
    name: jelai-dev-network
    driver: bridge